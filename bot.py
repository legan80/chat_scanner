import logging
import os
import asyncio
import emoji
import uuid

from html import escape
from environs import Env

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode

from classify import classify_message, train, dataset

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# load_dotenv()
env = Env()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Env
env.read_env()  # –ú–µ—Ç–æ–¥–æ–º read_env() —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª .env –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

bot = Bot(env("BOT_TOKEN"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
messagesBySession = {}
message_storage = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–° –±–æ—Ç–∞
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.reply("‚ùå –ë–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –¥–∞—Ç–∞—Å–µ—Ç
@dp.message(Command("add"))
async def add(message: types.Message, command: CommandObject):
    if message.chat.id != int(os.getenv("JOURNAL_CHAT_ID")):
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    args = command.args

    if args is not None:
        message_id = str(uuid.uuid4())
        message_storage[message_id] = args  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–°–ø–∞–º", callback_data=f"add:spam:{message_id}"))
        keyboard.add(InlineKeyboardButton(text="–ù–µ —Å–ø–∞–º", callback_data=f"add:ham:{message_id}"))

        await message.reply(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n<blockquote>{args}</blockquote>\n\nHAM - –Ω–µ —Å–ø–∞–º, SPAM - —Å–ø–∞–º", reply_markup=keyboard.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –°–ø–∞–º/–ù–µ —Å–ø–∞–º –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
@dp.callback_query(F.data.startswith("add:"))
async def add_callback(callback: CallbackQuery):
    data = callback.data.split(":")
    category = data[1]  # spam –∏–ª–∏ ham
    message_id = data[2]  # uuid —Å–æ–æ–±—â–µ–Ω–∏—è

    message_text = message_storage.get(message_id)

    if message_text is None:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    confirmation_keyboard = InlineKeyboardBuilder()
    confirmation_keyboard.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_add:{category}:{message_id}"))
    confirmation_keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add"))

    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ {category.upper()}?\n\n<blockquote>{message_text}</blockquote>", reply_markup=confirmation_keyboard.as_markup())
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("confirm_add:"))
async def confirm_add(callback: CallbackQuery):
    data = callback.data.split(":")
    category = data[1]  # spam –∏–ª–∏ ham
    message_id = data[2]  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    message_text = message_storage.get(message_id)

    if message_text is None:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    with open(dataset, 'a', encoding='utf-8') as f:
        message_text = ' '.join(message_text.splitlines())

        f.write(f"\n{category} {message_text}")

    await callback.message.edit_text("–û–±—Ä–∞–±–æ—Ç–∫–∞...", parse_mode=None)

    await callback.message.edit_text(f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ {category}, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è\n\n<blockquote>{message_text}</blockquote>\n\n<b>–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {(train("r") * 100):.0f}%</b>')
    del message_storage[message_id]

@dp.callback_query(F.data == "cancel_add")
async def cancel_add(callback: CallbackQuery):
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.delete()

# –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ –ø–æ–ª—É—Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ —Ç–∞—Ä–∏—Ñ–µ "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", —Å "–ù–∞—á–∞–ª—å–Ω—ã–º +" –∏–Ω–æ–≥–¥–∞ —É—Ö–æ–¥–∏—Ç –≤ –∂–µ–ª—Ç—É—é –∑–æ–Ω—É)
@dp.message()
async def check_spam(message: types.Message):
    if message.from_user.id == env('CHANNEL_ID'):
        return


    if message.chat.type == "private" or message.chat.id != int(os.getenv("CHAT_IDS")):
        logger.info("–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç-–∞–Ω—Ç–∏—Å–ø–∞–º. –ò–≥–Ω–æ—Ä–∏—Ä—É—é.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not await msg_from_group(message) and (message.forward_from and message.forward_from.is_bot) or (message.forward_from_chat and message.forward_from_chat.id not in [int(os.getenv("CHAT_IDS")), int(os.getenv("CHANNEL_ID"))] and message.forward_from_chat.type == "channel"):
        await message.delete()
        await send_log(message, "forwarded_from_")
        return

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø–∞–º/–Ω–µ —Å–ø–∞–º) –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (—Ç.–∫. —É –Ω–∞—Å –≤—Å–µ –ø–∏—à—É—Ç –æ—Ç –ª–∏—Ü–∞ –≥—Ä—É–ø–ø—ã - —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ ID –≥—Ä—É–ø–ø—ã)
    elif not await msg_from_group(message) and classify_message(message.text):
        logger.info("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø–∞–º/–Ω–µ —Å–ø–∞–º)")
        await message.delete()
        await send_log(message, "classify")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not await msg_from_group(message) and check_emojis(message.text):
        await message.delete()
        await send_log(message, "emoji_spam")
        return

# –ö–Ω–æ–ø–∫–∞ "–õ–æ–∂–Ω–æ–µ!" –≤ —á–∞—Ç–µ –∂—É—Ä–Ω–∞–ª–∞
@dp.callback_query(F.data.startswith("false:"))
async def false(callback: CallbackQuery):
    message_id = int(callback.data.split(":")[1])

    if message_id in messagesBySession:
        original_msg = messagesBySession[message_id][0]
        sended_msg = messagesBySession[message_id][1]

        with open(dataset, 'a', encoding='utf-8') as f:
            edited_text = ' '.join(original_msg.text.splitlines())

            f.write(f"\nham {edited_text}")
        await callback.message.edit_text("–û–±—Ä–∞–±–æ—Ç–∫–∞...", parse_mode=None)
        await sended_msg.edit_text(text=f'‚úÖ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ª–æ–∂–Ω–æ–µ, –¥–∞—Ç–∞—Å–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è.\n\n<blockquote>–°–æ–æ–±—â–µ–Ω–∏–µ: <i>{escape((original_msg.text if original_msg.text else original_msg.caption if original_msg.caption else "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))}</i></blockquote>\n\n<b>–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {(train("r") * 100):.0f}%</b>')
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ")

# –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–Ω–æ–ø–∫–µ –≤ —á–∞—Ç–µ –∂—É—Ä–Ω–∞–ª–∞
@dp.callback_query(F.data.startswith("ban:"))
async def false(callback: CallbackQuery):
    message_id = int(callback.data.split(":")[1])

    if message_id in messagesBySession:
        original_msg = messagesBySession[message_id][0]
        sended_msg = messagesBySession[message_id][1]
        reason = messagesBySession[message_id][2]

        try:
            await bot.ban_chat_member(original_msg.chat.id, original_msg.from_user.id)
            await callback.answer("–°–ø–∞–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
        except:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        await sended_msg.edit_text(text=f'üö´ –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b><a href="tg://user?id={original_msg.from_user.id}">{original_msg.from_user.first_name}</a>, –∞ —Å–ø–∞–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—à–µ–Ω–∏—é {callback.from_user.first_name}</b>!\n\n<blockquote>–°–æ–æ–±—â–µ–Ω–∏–µ: <i>{escape((original_msg.text if original_msg.text else original_msg.caption if original_msg.caption else "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))}</i></blockquote>\n\n–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è: <b>{reason}</b>')
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ")

# –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
async def clear_messages_by_session():
    while True:
        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        messagesBySession.clear()
        message_storage.clear()
        logger.info("–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–æ.")

        # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ, –∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
async def msg_from_group(message: types.Message):
    return True if str(message.from_user.id) == env('AVITO_BOT_ID') else False

# –û—Ç–ø—Ä–∞–≤–∫–∞ "–ª–æ–≥–∞" –≤ —á–∞—Ç –∂—É—Ä–Ω–∞–ª–∞
async def send_log(message: types.Message, type: str):
    user_id = message.from_user.id

    # –ú–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ match case –¥–ª—è –±–æ–ª—å—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    reason = "–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Å–ø–∞–º" if type == "classify" else "—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –±–æ—Ç–∞" if type == "forwarded_from_" else "—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ 5 –∏–ª–∏ –±–æ–ª–µ–µ —ç–º–æ–¥–∑–∏ –ø–æ–¥—Ä—è–¥"

    msg = f'üö´ –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b><a href="tg://user?id={user_id}">{message.from_user.first_name}</a></b>!\n\n<blockquote>–°–æ–æ–±—â–µ–Ω–∏–µ: <i>{escape((message.text if message.text else message.caption if message.caption else "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))}</i></blockquote>\n\n–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è: <b>{reason}</b>'

    sended_msg = await bot.send_message(int(os.getenv("JOURNAL_CHAT_ID")), msg, reply_markup = await markup(message, True, True) if type == "classify" else await markup(message, False, True))

    messagesBySession[message.message_id] = message, sended_msg, reason
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–∏—á–∏–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if type == "emoji_spam":
        rmsg = await message.answer(f"<b>{message.from_user.full_name}</b>, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ –∏–ª–∏ –±–æ–ª–µ–µ —ç–º–æ–¥–∑–∏")

        await asyncio.sleep(15)
        await rmsg.delete()

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π markup –∫–Ω–æ–ø–æ–∫ –¥–ª—è —á–∞—Ç–∞ –∂—É—Ä–Ω–∞–ª–∞
async def markup(message: types.Message, withFalse: bool, withBan: bool):
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text="‚ùóÔ∏è–≠—Ç–æ –ù–ï —Å–ø–∞–º", callback_data=f"false:{message.message_id}")) if withFalse else None
    builder.add(InlineKeyboardButton(text=f"‚õîÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {message.from_user.first_name}", callback_data=f"ban:{message.message_id}")) if withBan else None

    if not withBan and not withBan:
        return None
    return builder.as_markup()

# # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ 3 –∏–ª–∏ –±–æ–ª–µ–µ –õ–Æ–ë–´–• —ç–º–æ–¥–∑–∏
# def check_emojis(text):
#     emojis = [char for char in text if emoji.is_emoji(char)]

#     for i in range(len(emojis) - 2):
#         if emojis[i] and emojis[i + 1] and emojis[i + 2]:
#             return True
#     return False

def check_emojis(text):
    count = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —ç–º–æ–¥–∑–∏

    for char in text:
        if emoji.is_emoji(char):  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª ‚Äî —ç–º–æ–¥–∑–∏
            count += 1
            if count >= 4:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 5 —ç–º–æ–¥–∑–∏ –ø–æ–¥—Ä—è–¥
                return True
        else:
            count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–µ–Ω –Ω–µ —ç–º–æ–¥–∑–∏

    return False

async def main():
    train("nr")

    asyncio.create_task(clear_messages_by_session())

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

asyncio.run(main())